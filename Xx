const gridWidth = 10;
const gridHeight = 10;
const numCellsToFind = 10;
let cellsFound = 0;
let startTime = 0;
let gameRunning = false;

function createGrid() {
  const table = document.getElementById("game-table");
  for (let i = 0; i < gridHeight; i++) {
    const row = document.createElement("tr");
    for (let j = 0; j < gridWidth; j++) {
      const cell = document.createElement("td");
      cell.setAttribute("data-row", i);
      cell.setAttribute("data-col", j);
      cell.addEventListener("click", cellClick);
      row.appendChild(cell);
    }
    table.appendChild(row);
  }
  scatterCells();
}

function scatterCells() {
  const cellsToFind = [];
  while (cellsToFind.length < numCellsToFind) {
    const row = Math.floor(Math.random() * gridHeight);
    const col = Math.floor(Math.random() * gridWidth);
    if (!cellsToFind.some(cell => cell.row === row && cell.col === col)) {
      cellsToFind.push({ row, col });
    }
  }
  cellsToFind.forEach(cell => {
    const targetCell = document.querySelector(`[data-row="${cell.row}"][data-col="${cell.col}"]`);
    targetCell.classList.add("target-cell");
  });
}

function cellClick(event) {
  if (!gameRunning) {
    startTime = Date.now();
    gameRunning = true;
    startTimer();
  }

  const clickedCell = event.target;
  if (clickedCell.classList.contains("target-cell")) {
    clickedCell.classList.add("found-cell");
    cellsFound++;
    checkGameEnd();
  } else {
    clickedCell.classList.add("wrong-cell");
  }
}

function startTimer() {
  setTimeout(() => {
    gameRunning = false;
    clearInterval(updateTimer);
    alert("Время вышло! Вы проиграли. Игра начнется заново.");
    resetGame();
  }, 10000);

  setInterval(updateTimer, 1000);
}

function updateTimer() {
  const currentTime = Math.floor((Date.now() - startTime) / 1000);
  document.getElementById("time").textContent = currentTime;
}

function resetGame() {
  cellsFound = 0;
  startTime = 0;
  gameRunning = false;

  // Очистка таблицы
  const cells = document.querySelectorAll("td");
  cells.forEach(cell => {
    cell.classList.remove("found-cell", "wrong-cell", "target-cell");
  });

  // Создание новой игры
  createGrid();
}

createGrid();
